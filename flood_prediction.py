# -*- coding: utf-8 -*-
"""Flood Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17rV_Z0oIxb_wObH8FRqSEfgODDQo1m0H
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

df =pd.read_csv('kerala.csv')
df.head()

df.shape

df.info()

df.isnull().sum()

df.describe()

sns.set()

plt.figure(figsize=(8,8))
sns.distplot(df['JAN'])
plt.show()

plt.figure(figsize=(8,8))
sns.distplot(df['AUG'])
plt.show()

df['FLOODS'].value_counts()

plt.figure(figsize=(8,8))
sns.countplot(df['FLOODS'])
plt.show()

df.head()

# Encode the flood column with Yes = 1 and No = 0
encoder = LabelEncoder()

df['FLOODS'] = encoder.fit_transform(df['FLOODS'])

df.head()

Correlation = df.corr()

# heatmap 
plt.figure(figsize=(13,13))
sns.heatmap(Correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Splitting the features"""

X = df.iloc[:,1:14]
X

Y = df['FLOODS']
Y

"""# Splitting the dataset into train and test dataset"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train, Y_train)

"""## Model Evaluation"""

training_prediction = model.predict(X_train)

score_1 = metrics.r2_score(Y_train, training_prediction)
print(score_1)

testing_prediction = model.predict(X_test)

score_2 = metrics.r2_score(Y_test, testing_prediction)
print(score_2)

input_data = (2022, 28.7,	44.7,	51.6,	160.0,	174.7,	83.6,	33.0,	357.5,	1219,	266.9,	350.8,	48.4)

# changing the tuple to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# making prediction
model_predict = model.predict(input_data_reshaped)
print(model_predict)

if model_predict[0]==0:
  print("No Flood")
else:
  print("Flood")